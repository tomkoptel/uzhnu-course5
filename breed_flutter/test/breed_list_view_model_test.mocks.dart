// Mocks generated by Mockito 5.0.3 from annotations
// in breed_flutter/test/breed_list_view_model_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:breed_flutter/data/breed_api.dart' as _i6;
import 'package:breed_flutter/data/breed_database.dart' as _i3;
import 'package:breed_flutter/domain/breed.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:sqflite_common/sqlite_api.dart' as _i2;

// ignore_for_file: comment_references
// ignore_for_file: unnecessary_parenthesis

class _FakeDatabase extends _i1.Fake implements _i2.Database {}

/// A class which mocks [BreedDatabase].
///
/// See the documentation for Mockito's code generation for more information.
class MockBreedDatabase extends _i1.Mock implements _i3.BreedDatabase {
  MockBreedDatabase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Database get database => (super.noSuchMethod(Invocation.getter(#database),
      returnValue: _FakeDatabase()) as _i2.Database);
  @override
  _i4.Future<void> insert(_i5.Breed? breed) =>
      (super.noSuchMethod(Invocation.method(#insert, [breed]),
          returnValue: Future.value(null),
          returnValueForMissingStub: Future.value()) as _i4.Future<void>);
  @override
  _i4.Future<List<_i5.Breed>> all() => (super.noSuchMethod(
      Invocation.method(#all, []),
      returnValue: Future.value(<_i5.Breed>[])) as _i4.Future<List<_i5.Breed>>);
  @override
  _i4.Future<void> clear() => (super.noSuchMethod(Invocation.method(#clear, []),
      returnValue: Future.value(null),
      returnValueForMissingStub: Future.value()) as _i4.Future<void>);
}

/// A class which mocks [BreedApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockBreedApi extends _i1.Mock implements _i6.BreedApi {
  MockBreedApi() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i5.Breed>> fetchBreeds() => (super.noSuchMethod(
      Invocation.method(#fetchBreeds, []),
      returnValue: Future.value(<_i5.Breed>[])) as _i4.Future<List<_i5.Breed>>);
}
